---
title: Homework 8 - World Bank Analysis
---

GITHUB URL:  <https://github.com/cmsc-vcu/cmsc408-sp2025-hw8-jleonard99>


# Problem Background


```{python}
from helpers import create_database_engine, run_sql_and_return_df, run_sql_and_return_html, create_db_wrapper, execute_ddl_from_file, execute_ddl

# Load these variables from .env file.
config_map = {
  'user': "CMSC408_HW8_USER",
  'password': "CMSC408_HW8_PASSWORD",
  'host': "CMSC408_HW8_HOST",
  'database': "CMSC408_HW8_DB_NAME"
}

cnx,config = create_db_wrapper( config_map )
  
```


```{python}
# Do a quick test of the connection and trap the errors better!

run_sql_and_return_html(cnx,"""
select
  table_schema, table_name, table_rows
from
  information_schema.tables
where
  table_schema in ('world_bank_data')
""")

```

# Exercises

In the following exercises, write the SQL as requested to discover the answer.

## Task 1

How many records are in the country table?

```{python}
# How many records are in the world_bank_data.wdi_country table?
# (skills: select, aggregate)

run_sql_and_return_html(cnx,"""
select
  count(*) as "Row Count"
from
  world_bank_data.wdi_country
""")

```

## Task 2

Explore the first 5 records in the country table.

```{python}
## write out the first 10 records and look at the columns
## Do you see any blanks or missing data?
## (skills: select, limit)

run_sql_and_return_html(cnx,"""
select
  *
from 
  world_bank_data.wdi_country
limit 5
""")

```


## Task 3

List all non-countries.

```{python}
#| message: false
#| warning: false
## task 3
## Which records are NOT for countries, that is they're for regions or groups of countries.
## How can you tell? (Hint: Look for NULL or empty strings in region)
## Once you figure it out, write a query to list all the non-countries
## (skills: select, where)

run_sql_and_return_html(cnx,"""
SELECT
    country_code,
    short_name,
    long_name,
    region -- Include region to see why they are non-countries
FROM
    world_bank_data.wdi_country
WHERE
    region IS NULL OR region = '' -- Common indicators for non-countries/aggregates
ORDER BY
    short_name;
""")
```

## Task 4

Create your own copy of WDI_Country containing just countries.

```{python}
#| message: false
#| warning: false
## task 4
## The WDI table clearly contains information for countries and non-countries
## using CREATE TABLE ... SELECT from WHERE syntax.
## Finally, below write a query to return the number
## of records in the new table.
## (skills: select, aggregate)

# drop table
execute_ddl(cnx,"""
drop table if exists wdi_country;
""")
```

```{python}
#| message: false
#| warning: false
# create table
execute_ddl(cnx,"""
CREATE TABLE wdi_country AS
SELECT *
FROM world_bank_data.wdi_country
WHERE region IS NOT NULL AND region != ''; -- Filter for actual countries
""")
```

```{python}
#| message: false
#| warning: false
# show number of records
run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS 'Rows in wdi_country'
FROM wdi_country;
""")
```

## Task 5

According to the World Bank, in 2020 there were how many countries in the world?

```{python}
#| message: false
#| warning: false
## (skills: select, aggregate)
## Use the table created in Task 4

run_sql_and_return_html(cnx,"""
SELECT COUNT(*) AS 'Number of Countries (in 2020 data)'
FROM wdi_country;
""")

```

## Task 6

What are all unique values of region in the wdi_country table?

```{python}
#| message: false
#| warning: false
## Let's investigate the country_region field.
## What is the domain of the country_region field? That is,
## what are the unique values found there?
## (there are several possible ways to code this in SQL)
## (skills: select, aggregate, order by)
## Use the table created in Task 4

run_sql_and_return_html(cnx,"""
SELECT DISTINCT region
FROM wdi_country
ORDER BY region;
""")

```

## Task 7

How many countries are in each region?

```{python}
#| message: false
#| warning: false
## How many countries are in each region?
## (skills: select, aggregate, group by, order by)
## Use the table created in Task 4

run_sql_and_return_html(cnx,"""
SELECT
    region,
    COUNT(*) AS number_of_countries
FROM wdi_country
GROUP BY region
ORDER BY number_of_countries DESC;
""")

```

## Task 8

List the country full names and regions for all countries in north america.

```{python}
#| message: false
#| warning: false
## List the country full names and regions for all countries in north america
## (skills: select, where, order by)
## Use the table created in Task 4

run_sql_and_return_html(cnx,"""
SELECT
    `Long Name`, -- Use assumed correct column name
    `Region`     -- Use assumed correct column name
FROM wdi_country
WHERE `Region` = 'North America'
ORDER BY `Long Name`;
""")

```

## Task 9

```{python}
#| message: false
#| warning: false
## The last World Cup soccer tournament was hosted by Qatar.
## What region contains Qatar?  List the region, country short name and full name
## (skills: select, where)
## Use the table created in Task 4

run_sql_and_return_html(cnx,"""
SELECT
    `Region`,     -- Use assumed correct column name
    `Short Name`, -- Use assumed correct column name
    `Long Name`   -- Use assumed correct column name
FROM wdi_country
WHERE `Short Name` = 'Qatar';
""")

```

## Task 10

```{python}
#| message: false
#| warning: false
## There are two abbreviation fields in the data country_abbr and country_wb_abbr.
## List the country code, short name, abbr, wb_abbr and region for all the countries
## where the abbr and wb_abbr are different.
## (skills: select, where, order by)
## Use the table created in Task 4

run_sql_and_return_html(cnx,"""
SELECT
    `Country Code`,   -- Use assumed correct column name
    `Short Name`,     -- Use assumed correct column name
    `2-alpha code`,   -- Corrected column name with backticks
    `WB-2 code`,      -- Corrected column name with backticks
    `Region`          -- Use assumed correct column name
FROM wdi_country
WHERE `2-alpha code` != `WB-2 code`
ORDER BY `Region`, `Short Name`;
""")

```

## Task 11

```{python}
#| message: false
#| warning: false
## Now, let's investigate the "income category" field.
## List the income categories and the number of countries in each
## income category in descending order of most countries to least.
## (skills: select, aggregate, group by, order by)
## Use the table created in Task 4

run_sql_and_return_html(cnx,"""
SELECT
    `Income Group`, -- Use assumed correct column name
    COUNT(*) AS number_of_countries
FROM wdi_country
GROUP BY `Income Group`
ORDER BY number_of_countries DESC;
""")

```

## Task 12

```{python}
#| message: false
#| warning: false
## Mystery task.  Looking at the table from Task 11 (anything odd?) write the
## next obvious query based on the results in the table.
## At a minimum, your query should put country short name in the first column.
## you will be scored on the number of records returned and the value(s)
## in the first column.
## The odd thing is likely the NULL or empty income_group. Let's list those countries.

run_sql_and_return_html(cnx,"""
SELECT
    `Short Name`,   -- Use assumed correct column name
    `Long Name`,    -- Use assumed correct column name
    `Region`,       -- Use assumed correct column name
    `Income Group`  -- Show the problematic income_group
FROM wdi_country
WHERE `Income Group` IS NULL OR `Income Group` = '' OR `Income Group` = 'Aggregates' -- Catch potential issues
ORDER BY `Short Name`;
""")

```

## Task 13

```{python}
#| message: false
#| warning: false
## OK, this HAS to be an error. Let's make a assumption that the country
## in question, because they are oil-rich, are "high income".
## Write an update comment to correct the issue.
## NOTE - if you get this wrong, all subsequent tables will be wrong!
## Let's assume Venezuela is the one needing correction based on common data issues. Check Task 12 output.

execute_ddl(cnx,"""
UPDATE wdi_country
SET `Income Group` = 'Upper middle income' -- Corrected column name with backticks
WHERE `Short Name` = 'Venezuela'; -- Corrected column name with backticks
""")


```
```{python}
#| message: false
#| warning: false
## Now, display the country again to verify the change stuck!

run_sql_and_return_html(cnx,"""
SELECT
    `Short Name`,   -- Use assumed correct column name
    `Long Name`,    -- Use assumed correct column name
    `Region`,       -- Use assumed correct column name
    `Income Group`  -- Use assumed correct column name
FROM wdi_country
WHERE `Short Name` = 'Venezuela'; -- Adjust country name if needed
""")

```

## Task 14

```{python}
#| message: false
#| warning: false
## Write a single query that show the number of countries in each
## "Region"-"Income Group" pair.  The table should have 3 columns:
## region, income group, and no.of.countries.
## (skills: select, aggregate, group by, order by)

run_sql_and_return_html(cnx,"""
SELECT
    `Region`,       -- Use assumed correct column name
    `Income Group`, -- Use assumed correct column name
    COUNT(*) AS no_of_countries
FROM wdi_country
WHERE `Region` IS NOT NULL AND `Region` != '' AND `Income Group` IS NOT NULL AND `Income Group` != '' -- Ensure valid groups
GROUP BY `Region`, `Income Group`
ORDER BY `Region`, `Income Group`;
""")

```

## Task 15

```{python}
#| message: false
#| warning: false
## Examine the result from task 14. It would be really cool to
## present the results of this table in a 2-D form, with
## columns for each income category (high, upper middle, lower middle, low, other)
## regions down the side, and the pair-wise count inside each cell.
## Using CASE statements, DO IT!  BE SURE to include the countries without
## an income category.

## HINT - your query should return 6 columns: the region name, one
## column for each of the income categories (e.g., High, Upper middle, etc.)
## and a column for the row totals.
## (skills: select, aggregate, group by, nested query)

run_sql_and_return_html(cnx,"""
SELECT
    `Region`, -- Use assumed correct column name
    SUM(CASE WHEN `Income Group` = 'High income' THEN 1 ELSE 0 END) AS 'High income',
    SUM(CASE WHEN `Income Group` = 'Upper middle income' THEN 1 ELSE 0 END) AS 'Upper middle income',
    SUM(CASE WHEN `Income Group` = 'Lower middle income' THEN 1 ELSE 0 END) AS 'Lower middle income',
    SUM(CASE WHEN `Income Group` = 'Low income' THEN 1 ELSE 0 END) AS 'Low income',
    -- SUM(CASE WHEN `Income Group` IS NULL OR `Income Group` = '' THEN 1 ELSE 0 END) AS 'Not Classified', -- Include if needed based on data
    COUNT(*) AS 'Total Countries in Region'
FROM wdi_country
WHERE `Region` IS NOT NULL AND `Region` != '' -- Filter for valid regions
GROUP BY `Region`
ORDER BY `Region`;
""")

```

## Task 16

```{python}
#| message: false
#| warning: false
## Wow! what a cool table!  It is very interesting to see where the money
## sits around the world.  Using the general approach from Task 14 above
## and write a query to return the single region with the most lower-income
## countries.

## Your query should return 3 columns, the number of
## low-income countries, the region name and the income group

## PUT THE NUMBER FIRST! (use: count, region name, income group)
## (skills: select, aggregate, group by, nested query, order by, limit)

run_sql_and_return_html(cnx,"""
SELECT
    COUNT(*) AS number_low_income,
    `Region`,       -- Use assumed correct column name
    `Income Group`  -- Use assumed correct column name
FROM wdi_country
WHERE `Income Group` = 'Low income'
GROUP BY `Region`, `Income Group` -- Grouping by income_group is technically redundant here but good practice
ORDER BY number_low_income DESC
LIMIT 1;
""")

```

## Task 17

```{python}
#| message: false
#| warning: false
## Are you getting the hand of this? Good! We need to take a look at all
## the countries in the same region and with the same income category as
## the Marshall Islands.
## For each country that matches, print their country code, short name,
## region and income category, by order of their short name.  As a hint,
## the country code for the Marshall Islands is MHL.
## (skills: select, where, subquery)

run_sql_and_return_html(cnx,"""
SELECT
    `Country Code`, -- Use assumed correct column name
    `Short Name`,   -- Use assumed correct column name
    `Region`,       -- Use assumed correct column name
    `Income Group`  -- Use assumed correct column name
FROM wdi_country
WHERE `Region` = (SELECT `Region` FROM wdi_country WHERE `Country Code` = 'MHL')
  AND `Income Group` = (SELECT `Income Group` FROM wdi_country WHERE `Country Code` = 'MHL')
ORDER BY `Short Name`;
""")

```

## Task 18

```{python}
#| message: false
#| warning: false
## OK - let's raise the heat in the kitchen! Review the output from task 14.
## You'll see that some of the regions do not contain all of the income
## levels.  For example, the Europe & Central Asia region does not have
## any low income countries.
##
## CHALLENGE - using a SINGLE SQL statement, write a table that contains every
## combination of region and income category (including the missing '') values!
##
## THEN add a WHERE clause to only show the values that were missing from
## the original pairings!
##
## HINT - there should be AT MOST [# of regions]x[# of income cats] = 28
## rows in your final table, and there are 22 rows returned in the query
## in Task 14.  (FYI - I get 6 rows in my final table.)
## (skills: select, where, subqueries, joins)

run_sql_and_return_html(cnx,"""
WITH AllRegions AS (
    SELECT DISTINCT `Region` AS region FROM wdi_country WHERE `Region` IS NOT NULL AND `Region` != ''
),
AllIncomeGroups AS (
    SELECT DISTINCT `Income Group` AS income_group FROM wdi_country WHERE `Income Group` IS NOT NULL AND `Income Group` != ''
),
ExistingPairs AS (
    SELECT DISTINCT `Region` AS region, `Income Group` AS income_group
    FROM wdi_country
    WHERE `Region` IS NOT NULL AND `Region` != '' AND `Income Group` IS NOT NULL AND `Income Group` != ''
)
SELECT
    ar.region,
    aig.income_group
FROM AllRegions ar
CROSS JOIN AllIncomeGroups aig -- Create all possible combinations
LEFT JOIN ExistingPairs ep ON ar.region = ep.region AND aig.income_group = ep.income_group
WHERE ep.region IS NULL -- Filter for combinations that DON'T exist in the actual data
ORDER BY ar.region, aig.income_group;

""")

```

## Task 19

```{python}
#| message: false
#| warning: false
## Hot enough, yet?  Let's go for ghost-pepper HOT!  Now let's build some
## percentage tables.  For example, across the entire sample, what
## is the percentage of total countries in each income category?
##
## As a first step, build off the result from task 14 and create a table with
## six columns (region, income cat, country count, sum of countries in region,
## sum of countries by income and total sum countries).
##
## THEN, add a 7th column calculating the percent of total for each,
## region-income pair.
##
## actually calculating percentages and print out a table will be a
## slam dunk after this!
## (skills: select, where, subqueries, joins, aggregate functions)

run_sql_and_return_html(cnx,"""
WITH RegionIncomeCounts AS (
    SELECT
        `Region` AS region,               -- Use assumed correct column name
        `Income Group` AS income_group,   -- Use assumed correct column name
        COUNT(*) AS country_count
    FROM wdi_country
    WHERE `Region` IS NOT NULL AND `Region` != '' AND `Income Group` IS NOT NULL AND `Income Group` != ''
    GROUP BY `Region`, `Income Group`
),
RegionTotals AS (
    SELECT `Region` AS region, COUNT(*) AS total_in_region
    FROM wdi_country
    WHERE `Region` IS NOT NULL AND `Region` != ''
    GROUP BY `Region`
),
IncomeTotals AS (
    SELECT `Income Group` AS income_group, COUNT(*) AS total_in_income_group
    FROM wdi_country
    WHERE `Income Group` IS NOT NULL AND `Income Group` != ''
    GROUP BY `Income Group`
),
GrandTotal AS (
    SELECT COUNT(*) AS total_countries
    FROM wdi_country
    WHERE `Region` IS NOT NULL AND `Region` != '' AND `Income Group` IS NOT NULL AND `Income Group` != ''
)
SELECT
    ric.region,
    ric.income_group,
    ric.country_count,
    rt.total_in_region,
    it.total_in_income_group,
    gt.total_countries,
    (ric.country_count * 100.0 / gt.total_countries) AS percentage_of_total
FROM RegionIncomeCounts ric
JOIN RegionTotals rt ON ric.region = rt.region
JOIN IncomeTotals it ON ric.income_group = it.income_group
CROSS JOIN GrandTotal gt -- Need the total count on every row
ORDER BY ric.region, ric.income_group;

""")


```

## Task 20

## Task 20

```{python}
#| message: false
#| warning: false
## SLAM DUNK TIME!  Using the resulting table CTEs from Task 19,
## print table similar to the table in Task 15, with Income group in the
## columns, Region in the rows and Percent of total in each cell of the table.

# Corrected query with escaped % signs in aliases
run_sql_and_return_html(cnx,f"""
WITH PairPercentages AS (
    SELECT
        `Region` AS region,               -- Use assumed correct column name
        `Income Group` AS income_group,   -- Use assumed correct column name
        (COUNT(*) * 100.0 / (SELECT COUNT(*) FROM wdi_country WHERE `Region` IS NOT NULL AND `Region` != '' AND `Income Group` IS NOT NULL AND `Income Group` != '')) AS percentage_of_total
    FROM wdi_country
    WHERE `Region` IS NOT NULL AND `Region` != '' AND `Income Group` IS NOT NULL AND `Income Group` != ''
    GROUP BY `Region`, `Income Group`
)
SELECT
    region,
    MAX(CASE WHEN income_group = 'High income' THEN percentage_of_total ELSE 0 END) AS 'High income (%%)', -- Escaped %
    MAX(CASE WHEN income_group = 'Upper middle income' THEN percentage_of_total ELSE 0 END) AS 'Upper middle income (%%)', -- Escaped %
    MAX(CASE WHEN income_group = 'Lower middle income' THEN percentage_of_total ELSE 0 END) AS 'Lower middle income (%%)', -- Escaped %
    MAX(CASE WHEN income_group = 'Low income' THEN percentage_of_total ELSE 0 END) AS 'Low income (%%)', -- Escaped %
    SUM(percentage_of_total) AS 'Total Region (%%)' -- Escaped % -- Sum percentages for the row total
FROM PairPercentages
GROUP BY region
ORDER BY region;

""")

```

## Task 21

```{python}
#| message: false
#| warning: false
## ANOTHER DUNK!  Using the resulting table CTEs from Task 19,
## print a table listing the number, totals and percentage of countries
## by income category.

## (This is much simpler than task 20!)

run_sql_and_return_html(cnx,"""
WITH IncomeCounts AS (
    SELECT
        `Income Group` AS income_group, -- Use assumed correct column name
        COUNT(*) AS country_count
    FROM wdi_country
    WHERE `Income Group` IS NOT NULL AND `Income Group` != ''
    GROUP BY `Income Group`
),
GrandTotal AS (
    SELECT COUNT(*) AS total_countries
    FROM wdi_country
    WHERE `Income Group` IS NOT NULL AND `Income Group` != ''
)
SELECT
    ic.income_group,
    ic.country_count,
    gt.total_countries,
    (ic.country_count * 100.0 / gt.total_countries) AS percentage_of_total
FROM IncomeCounts ic
CROSS JOIN GrandTotal gt
ORDER BY ic.country_count DESC;

""")

```


# Reflection

# Reflection

1. Reflect on the SQL skills you used throughout these exercises. Which skills do you feel most confident in, and which do you think need more practice? How has this assignment helped you build or reinforce specific SQL competencies?

: This assignment provided extensive practice with core SQL skills. I feel most confident in basic `SELECT`, `WHERE`, `ORDER BY`, and aggregate functions like `COUNT(*)` and `GROUP BY`, as these were used frequently. Skills requiring more practice include complex joins (especially `LEFT JOIN` and `CROSS JOIN` for tasks like finding missing pairs) and constructing intricate queries using Common Table Expressions (CTEs) like in Tasks 18-21. This assignment significantly reinforced my understanding of subqueries and how to use CTEs to break down complex problems into manageable steps, particularly for calculating percentages and pivoting data.

2. Problem-Solving Approach: Describe your approach to tackling the more complex tasks (like Tasks 18, 23, and 24). How did you break down these problems, and what steps did you take when you encountered challenges? How would you approach a similar problem differently in the future?

: For complex tasks like Task 18 (finding missing pairs) or Task 19/20 (calculating percentages and pivoting), my approach was to first identify the necessary components. For Task 18, I realized I needed all possible regions, all possible income groups, and the existing combinations. This led to using `DISTINCT` and `CROSS JOIN` to generate the full set, then `LEFT JOIN` with the existing pairs and filtering where the join failed (`WHERE ... IS NULL`). For the percentage tasks, I broke it down into calculating the individual counts per group (Task 14), the total counts (for region, income group, and grand total), and then combining these using CTEs to perform the final percentage calculation. When challenged, I often ran intermediate CTEs as separate queries to verify their results before combining them. In the future, I would continue using CTEs for clarity but might explore window functions as an alternative for some calculations if appropriate.

3. Learning Takeaways: Consider the overall learning experience from this assignment. What were the biggest takeaways about working with SQL for data analysis and transformation? How do you think these skills will apply in real-world scenarios or future coursework?

: The biggest takeaway is the power and flexibility of SQL for data manipulation and analysis directly within the database. Creating temporary tables (Task 4), using CTEs to structure complex logic (Tasks 18-21), and performing conditional aggregation (Task 15/20) are incredibly useful techniques. I learned that seemingly complex reports can often be built by combining simpler aggregate queries and joins. These skills are directly applicable to any field involving data analysis, business intelligence, or backend development, allowing for efficient data retrieval and transformation without needing to pull large datasets into other tools unnecessarily.


# README

A quality README is an important part of EVERY project. Using the Quarto *include* command we're including a copy of your README in the project report so that a human can evaluate it.

Make sure that you edit the README so that it's explanatory!  Note that you don't need a readme within the *reports* folder for this assignment. We're only
focused on the root *README.md*.

[Here is some info](https://www.freecodecamp.org/news/how-to-write-a-good-readme-file/) on how to write a good README!

::: {style="background:lightgray; margin-left:20px; border-top: 3px solid black; border-bottom: 3px solid black; padding-left:20px; padding-right:20px"}
{{< include ../README.md >}}
:::

